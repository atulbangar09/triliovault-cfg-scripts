---

- name: Collect static files for horizon
  shell: "{{virtual_env}} && {{PYTHON_VERSION}} {{ MANAGE_FILE }}  collectstatic --noinput"
  notify:
    - restart webserver

- name: compress the collected files
  shell: "{{virtual_env}} && nohup {{PYTHON_VERSION}} {{ MANAGE_FILE }} compress --force"
  retries: 3
  delay: 3
  register: compress_result
  until: compress_result.rc == 0
  notify:
    - restart webserver

- name: write content into destination file - sync_static.py
  template: src="sync_static.py" dest="/tmp/sync_static.py"

- name: Change the working directory to horizon and execute shell command
  shell: "{{virtual_env}} && {{PYTHON_VERSION}} {{ MANAGE_FILE }} shell < /tmp/sync_static.py"
  args:
       chdir: "{{HORIZON_PATH}}"
  register: data
  notify:
    - restart webserver

- name: Change the working directory to horizon and execute collectstatic --noinput with data
  shell: "{{virtual_env}} && {{PYTHON_VERSION}} {{ MANAGE_FILE }}  collectstatic --noinput {{data.stdout}}"
  args:
    chdir: "{{HORIZON_PATH}}"
  notify:
    - restart webserver

- name: remove temporary file - sync_static.py
  file: path=/tmp/sync_static.py state=absent

- name: Get os_local_settings_path
  find:
    paths: "{{ horizon_virtual_env | dirname }}/"
    file_type: directory
    use_regex: yes
    patterns: 
      - '^.*?local_settings.(?:d)$'
    recurse: yes
  register: os_local_settings_path

- name: Find path & count of local_settings.d
  set_fact:
    loc_sett_path: "{{ os_local_settings_path.files| map(attribute='path')| list|join(',')}}"
    loc_sett_path_len: "{{ os_local_settings_path.files| map(attribute='path')| list|length}}"

- name: Stop playbook execution when local_settings.d not found or multiples
  fail:
    msg: "Didn't find local_settings.d dir or more than one locals_settings.d directories found."
  when: (loc_sett_path_len|int == 0) or
        (loc_sett_path_len|int > 1)

- name: HORIZON_CONFIG
  shell: "echo 'HORIZON_CONFIG['customization_module'] = 'dashboards.overrides'' > {{ loc_sett_path }}/_001_trilio_dashboard.py ;"
  when:
    - (os_local_settings_path != '')
    - (loc_sett_path_len|int == 1)

- name: Display local_settings.d path
  debug:
    msg: "local_settings.d path: {{ os_local_settings_path.files | map(attribute='path') }}"
    verbosity: "{{ verbosity_level }}"
  when:
    - os_local_settings_path != ""

- debug:
    msg: "\033[33m WARNING: Unable to locate local_settings.d on system. Trilio quota feature on dashboard may not work. \033[0m"
    verbosity: "{{ verbosity_level }}"
